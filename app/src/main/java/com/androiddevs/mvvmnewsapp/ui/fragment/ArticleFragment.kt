package com.androiddevs.mvvmnewsapp.ui.fragment

import android.os.Bundle
import android.view.View
import android.webkit.WebViewClient
import androidx.constraintlayout.widget.ConstraintLayout
import androidx.fragment.app.Fragment
import androidx.fragment.app.activityViewModels
import androidx.navigation.fragment.navArgs
import com.androiddevs.mvvmnewsapp.R
import com.androiddevs.mvvmnewsapp.db.ArticleDatabase
import com.androiddevs.mvvmnewsapp.repository.NewsRepository
import com.androiddevs.mvvmnewsapp.ui.MainActivity
import com.androiddevs.mvvmnewsapp.ui.NewsViewModel
import com.androiddevs.mvvmnewsapp.ui.NewsViewModelProviderFactory
import com.google.android.material.snackbar.Snackbar
import kotlinx.android.synthetic.main.fragment_article.fab
import kotlinx.android.synthetic.main.fragment_article.webView

/**
 * A Fragment that displays a single news article using a WebView.
 * It also allows the user to save the article to the local database.
 */
class ArticleFragment : Fragment(R.layout.fragment_article) {

    // ViewModel shared with the hosting Activity.
    // This ensures data survives configuration changes and can be shared between fragments.
    private val viewModel by activityViewModels<NewsViewModel>{
        val newsRepository = NewsRepository(ArticleDatabase(requireContext()))
        NewsViewModelProviderFactory(requireActivity().application, newsRepository)
    }

    // Use Safe Args to retrieve arguments passed to this fragment.
    // ArticleFragmentArgs is automatically generated by the Navigation component.
    val args: ArticleFragmentArgs by navArgs()

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        // Adjust the top margin of the WebView to account for the status bar height.
        // This prevents content from being obscured by the status bar.
        (webView.layoutParams as ConstraintLayout.LayoutParams).apply {
            topMargin = (requireActivity() as MainActivity).getStatusBarHeight()
        }

        // Retrieve the Article object passed as an argument.
        val article = args.article

        // Configure the WebView to display the article content.
        webView.apply {
            // Set a WebViewClient to ensure that links clicked within the WebView
            // are loaded inside this WebView, rather than opening in an external browser.
            webViewClient = WebViewClient()
            // Load the article's URL into the WebView if the URL is not null.
            article.url?.let {
                loadUrl(article.url)
            }
        }

        // This button is used to save the current article.
        fab.setOnClickListener {
            // Call the saveArticle method in the ViewModel to persist the article in the database.
            viewModel.saveArticle(article)
            // Display a Snackbar message to confirm that the article has been saved successfully.
            Snackbar.make(view, "Article saved successfully", Snackbar.LENGTH_SHORT).show()
        }
    }
}